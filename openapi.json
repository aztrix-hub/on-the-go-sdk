{
  "openapi": "3.0.1",
  "info": {
    "title": "Aztrix on-the-go API"
  },
  "servers": [
    {
      "url": "https://api.aztrix.me/webhook/",
      "description": "Aztrix on-the-go server"
    },
    {
      "url": "https://api.aztrix.me/webhook-test/",
      "description": "Aztrix on-the-go test server"
    }
  ],
  "tags": [
    {
      "name": "users"
    },
    {
      "name": "locations"
    },
    {
      "name": "sites"
    },
    {
      "name": "inbox"
    },
    {
      "name": "ai"
    },
    {
      "name": "whitelabel"
    },
    {
      "name": "notifications"
    },
    {
      "name": "publish"
    },
    {
      "name": "analytics"
    }
  ],
  "paths": {
    "/user/login": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Provides an access_token for the user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "Successfully logged out"
          },
          "500": {
            "description": "Error occurred during logout"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/user/oauth": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Finish OAuth flow",
        "description": "Provides an access_token for a authorization_code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "authorization_code": {
                    "type": "string",
                    "description": "Authorization code"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "Access Token"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/reset-password": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Resets the user's password",
        "description": "Changes the user's password to a new password",
        "requestBody": {
          "description": "A ResetPassword object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User password succesfully changed"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get the current user",
        "responses": {
          "200": {
            "description": "Successfully retrieved user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update the current user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully edited user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error occurred"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/location": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get a Location",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "locations"
        ],
        "summary": "Update a Location",
        "description": "Make changes to a location. Any blank parameter deletes an old value, any unspecified parameter does nothing",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique id for the location you want to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Location object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Location successfully edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "locations"
        ],
        "summary": "Create a Location",
        "requestBody": {
          "description": "Location object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Location successfully edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get locations",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Locations successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/locations/search": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Search for locations",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "search by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "countryCode",
            "in": "query",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z]{2}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Locations successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "locations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Location"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get categories",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filter categories by a search query",
            "schema": {
              "type": "string"
            },
            "example": "Auto"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Show categories in the specified language. One of de, en, es, fr",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "A list of categories",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "location/photo": {
      "post": {
        "tags": [
          "locations"
        ],
        "requestBody": {
          "description": "The photo data to upload",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "locationId",
                  "photo",
                  "type"
                ],
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A description for the photo - max 255 chars"
                  },
                  "locationId": {
                    "type": "string"
                  },
                  "photo": {
                    "type": "string",
                    "description": "file or base64"
                  },
                  "type": {
                    "$ref": "#/components/schemas/LocationPhotoType"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "locations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The photo has been deleted"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Invalid or Missing parameter"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/site/colors": {
      "get": {
        "tags": [
          "sites"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "sites"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "sites"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "primary100": {
                    "type": "string"
                  },
                  "primary300": {
                    "type": "string"
                  },
                  "primary500": {
                    "type": "string"
                  },
                  "primary900": {
                    "type": "string"
                  },
                  "secondary100": {
                    "type": "string"
                  },
                  "secondary300": {
                    "type": "string"
                  },
                  "secondary500": {
                    "type": "string"
                  },
                  "secondary900": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/legacy/conversation": {
      "post": {
        "tags": [
          "ai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "conversationId": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "userLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "minimum": -90,
                        "maximum": 90,
                        "type": "number",
                        "format": "double"
                      },
                      "longitude": {
                        "minimum": -180,
                        "maximum": 180,
                        "type": "number",
                        "format": "double"
                      },
                      "freeform": {
                        "type": "string"
                      }
                    }
                  },
                  "dateTime": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "conversationId": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "description": "All messages in the conversation including the assistant response",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/legacy/chat": {
      "post": {
        "tags": [
          "ai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "userId"
                ],
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "description": "All messages in the conversation including the assistant response",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string"
                          },
                          "content": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/chat": {
      "post": {
        "tags": [
          "ai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionId",
                  "message"
                ],
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "sessionId": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "userLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "minimum": -90,
                        "maximum": 90,
                        "type": "number",
                        "format": "double"
                      },
                      "longitude": {
                        "minimum": -180,
                        "maximum": 180,
                        "type": "number",
                        "format": "double"
                      }
                    }
                  },
                  "dateTime": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "sessionId": {
                      "type": "string"
                    },
                    "response": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/ai/chat/data": {
      "post": {
        "tags": [
          "ai"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sessionId",
                  "message"
                ],
                "properties": {
                  "sessionId": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "userLocation": {
                    "type": "object",
                    "properties": {
                      "latitude": {
                        "type": "number",
                        "format": "double"
                      },
                      "longitude": {
                        "type": "number",
                        "format": "double"
                      }
                    }
                  },
                  "dateTime": {
                    "type": "string"
                  },
                  "locationId": {
                    "type": "string"
                  },
                  "toolResponses": {
                    "type": "object",
                    "properties": {
                      "getContact": {
                        "$ref": "#/components/schemas/LocationOrIndividual"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved messages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "keywords": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "actions": {
                      "type": "object",
                      "properties": {
                        "search": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LocationOrIndividual"
                          }
                        },
                        "keywords": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "openingHours": {
                          "$ref": "#/components/schemas/OpeningHours"
                        },
                        "call": {
                          "type": "object",
                          "properties": {
                            "phone": {
                              "type": "string"
                            }
                          }
                        },
                        "text": {
                          "type": "object",
                          "properties": {
                            "phone": {
                              "type": "string"
                            },
                            "content": {
                              "type": "string"
                            }
                          }
                        },
                        "email": {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string"
                            },
                            "subject": {
                              "type": "string"
                            },
                            "body": {
                              "type": "string"
                            }
                          }
                        },
                        "updateContact": {
                          "type": "object",
                          "properties": {
                            "contact": {
                              "$ref": "#/components/schemas/LocationOrIndividual"
                            },
                            "results": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/LocationOrIndividual"
                              }
                            }
                          }
                        }
                      }
                    },
                    "toolCalls": {
                      "type": "object",
                      "properties": {
                        "getContact": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/ai/memories": {
      "get": {
        "tags": [
          "ai"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved memories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "next": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "previous": {
                      "type": "integer",
                      "format": "int32"
                    },
                    "memories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "categories": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "ai"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "The conversation where memories should be retrieved from",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string"
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "ai"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted memory"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ai/system": {
      "get": {
        "tags": [
          "ai"
        ],
        "responses": {
          "200": {
            "description": "Successfull",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task": {
                      "type": "string"
                    },
                    "context": {
                      "type": "string"
                    },
                    "exemplar": {
                      "type": "string"
                    },
                    "persona": {
                      "type": "string"
                    },
                    "format": {
                      "type": "string"
                    },
                    "tone": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inbox": {
      "post": {
        "tags": [
          "inbox"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "resolved",
                        "unresolved",
                        "replied",
                        "unreplied",
                        "contentUpdated",
                        "contentNonUpdated"
                      ]
                    }
                  },
                  "page": {
                    "type": "number",
                    "default": 1
                  },
                  "pageSize": {
                    "type": "number",
                    "default": 20
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inbox": {
                      "$ref": "#/components/schemas/InboxItems"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/inbox/item": {
      "get": {
        "tags": [
          "inbox"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxItem"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/inbox/reply": {
      "post": {
        "tags": [
          "inbox"
        ],
        "parameters": [
          {
            "name": "datapointId",
            "in": "path",
            "description": "Data point ID you want to reply to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "required": [
                    "reply"
                  ],
                  "reply": {
                    "type": "string",
                    "description": "The text you want to reply"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reply sent",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DataPoint"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "404": {
            "description": "Data point not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/whitelabel": {
      "get": {
        "tags": [
          "whitelabel"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhitelabelData"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "notifications/register": {
      "post": {
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "name": "deviceId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "notifications/config": {
      "get": {
        "tags": [
          "notifications"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "newReviews": {
                      "type": "boolean"
                    },
                    "newReviewsIgnoreDirectories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DirectoryType"
                      }
                    },
                    "newReviewsIgnoreStars": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "newSocialComments": {
                      "type": "boolean"
                    },
                    "aiSuggestions": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "notifications"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newReviews": {
                    "type": "boolean"
                  },
                  "newReviewsIgnoreDirectories": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DirectoryType"
                    }
                  },
                  "newReviewsIgnoreStars": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "newSocialComments": {
                    "type": "boolean"
                  },
                  "aiSuggestions": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "publish/posts": {
      "get": {
        "tags": [
          "publish"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "posts": {
                      "$ref": "#/components/schemas/SocialPosts"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "publish"
        ],
        "requestBody": {
          "description": "A SocialPost object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SocialPost"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Social Posts created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialPost"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      },
      "delete": {
        "tags": [
          "publish"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Social Post deleted"
          },
          "403": {
            "description": "Forbidden"
          },
          "401": {
            "description": "Not Authorized"
          },
          "400": {
            "description": "Invalid or Missing Parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/locations/listings": {
      "get": {
        "tags": [
          "locations"
        ],
        "responses": {
          "200": {
            "description": "Listing details successfully retrieved",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "listings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Listing"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/location/listing/connect": {
      "get": {
        "tags": [
          "locations"
        ],
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "listingId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Listing details successfully retrieved",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "connectUrl": {
                      "type": "string"
                    },
                    "oauthUrl": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Request Forbidden"
          },
          "400": {
            "description": "Invalid or missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    },
    "/analytics": {
      "get": {
        "tags": [
          "analytics"
        ],
        "parameters": [
          {
            "name": "locationIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "metrics",
            "in": "query",
            "description": "The types of metrics you want to get",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetricType"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metrics": {
                      "$ref": "#/components/schemas/Metrics"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Invalid or Missing parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "LoginBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "description": "User Password"
          }
        },
        "description": "Login Command"
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "Access Token"
          },
          "oauth": {
            "type": "boolean",
            "description": "Whether OAuth should be initiated"
          }
        },
        "description": "User access_token"
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "User": {
        "required": [
          "firstname",
          "lastname",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstname": {
            "type": "string",
            "description": "First Name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "phone": {
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        },
        "description": "User Model"
      },
      "Individual": {
        "required": [
          "firstname",
          "lastname",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstname": {
            "type": "string",
            "description": "First Name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "User Model"
      },
      "Location": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "type": "string"
          },
          "cellphone": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Keywords describing the locations activity"
            }
          },
          "openingHours": {
            "$ref": "#/components/schemas/OpeningHours"
          },
          "specialOpeningHours": {
            "$ref": "#/components/schemas/SpecialOpeningHours"
          },
          "logo": {
            "$ref": "#/components/schemas/Photo"
          },
          "coverPhoto": {
            "$ref": "#/components/schemas/Photo"
          },
          "photoGallery": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/Photo"
            }
          },
          "timezone": {
            "type": "string"
          },
          "website": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "averageRating": {
            "type": "number",
            "format": "float"
          },
          "reviewCount": {
            "type": "integer",
            "format": "int32"
          },
          "sponsored": {
            "type": "boolean"
          }
        },
        "description": "Location"
      },
      "LocationOrIndividual": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Location"
          },
          {
            "$ref": "#/components/schemas/Individual"
          }
        ]
      },
      "Address": {
        "required": [
          "streetAndNo",
          "city",
          "postalCode",
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "streetAndNo": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "postalCode": {
            "minLength": 0,
            "maxLength": 10,
            "type": "string"
          },
          "city": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "region": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "countryCode": {
            "minLength": 0,
            "pattern": "^[a-zA-Z]{2}$",
            "type": "string"
          },
          "extraDescription": {
            "minLength": 0,
            "maxLength": 255,
            "type": "string"
          },
          "latitude": {
            "minimum": -90,
            "maximum": 90,
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "minimum": -180,
            "maximum": 180,
            "type": "number",
            "format": "double"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "OpeningHours": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/OpeningHour"
        },
        "description": "Opening hours"
      },
      "OpeningHour": {
        "required": [
          "dayOfWeek"
        ],
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "required": true,
            "type": "integer",
            "description": "The weekday (1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday)",
            "format": "int32"
          },
          "closed": {
            "required": true,
            "type": "boolean",
            "description": "Open or closed on [dayOfWeek]"
          },
          "intervals": {
            "type": "array",
            "description": "A list of openinghours (time intervals), only required when `closed` is `false`",
            "items": {
              "$ref": "#/components/schemas/OpeningHourInterval"
            }
          }
        },
        "description": "Opening Hours",
        "example": [
          {
            "dayOfWeek": 1,
            "intervals": [
              {
                "start": "08:00",
                "end": "11:00"
              }
            ]
          },
          {
            "dayOfWeek": 2,
            "intervals": [
              {
                "start": "08:00",
                "end": "11:00"
              },
              {
                "start": "13:00",
                "end": "21:00"
              }
            ]
          },
          {
            "dayOfWeek": 3,
            "closed": true
          }
        ]
      },
      "SpecialOpeningHours": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SpecialOpeningHour"
        },
        "description": "Special opening hours"
      },
      "SpecialOpeningHour": {
        "required": [
          "date"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of a special opening hour (format: yyyy-MM-dd)"
          },
          "closed": {
            "type": "boolean",
            "description": "Open or closed on [date]"
          },
          "intervals": {
            "type": "array",
            "description": "A list of hour ranges (time intervals), only required when `closed` is `false`",
            "items": {
              "$ref": "#/components/schemas/OpeningHourInterval"
            }
          }
        },
        "description": "Special Opening Hours",
        "example": [
          {
            "date": "1991-06-12",
            "closed": true
          },
          {
            "date": "1991-06-13",
            "intervals": [
              {
                "start": "08:00",
                "end": "21:00"
              }
            ]
          }
        ]
      },
      "OpeningHourInterval": {
        "type": "object",
        "description": "A time interval (e.g. 12:00-15:00). 24 hours opened => 00:00-23:59",
        "properties": {
          "start": {
            "type": "string",
            "description": "the start time (format HH:mm)"
          },
          "end": {
            "type": "string",
            "description": "the end time (format HH:mm)"
          }
        }
      },
      "Listing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "locationId": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "description": "listing URL"
          },
          "connected": {
            "type": "boolean"
          }
        }
      },
      "Photo": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique id for the photo"
          },
          "url": {
            "type": "string",
            "description": "url of the photo"
          },
          "description": {
            "type": "string",
            "description": "A description for the photo - max 255 chars"
          }
        },
        "description": "Location Photo"
      },
      "LocationPhotoType": {
        "type": "string",
        "enum": [
          "LOGO",
          "COVER",
          "PHOTO"
        ]
      },
      "DataPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique id of the data point",
            "format": "int64"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            }
          },
          "liked": {
            "type": "boolean",
            "description": "Whether this datapoint has been liked or not"
          },
          "data": {
            "type": "string",
            "description": "Content of the datapoint (text of the review, url of the photo, count of checkins...)"
          },
          "type": {
            "type": "string",
            "description": "Datapoint Type. Values: [PHOTO, REVIEW, CHECKIN, CONVERSATION, QUESTION]",
            "enum": [
              "REVIEW",
              "PHOTO",
              "CHECKIN",
              "CONVERSATION",
              "COMMENT",
              "QUESTION",
              "POST",
              "IMAGE",
              "VIDEO",
              "CAROUSEL_ALBUM",
              "LINK",
              "EXPANDEDREVIEW",
              "AD_POST"
            ]
          },
          "countLikes": {
            "type": "integer",
            "description": "Number of likes to this item",
            "format": "int32"
          },
          "locationId": {
            "type": "string"
          },
          "actionDate": {
            "type": "string",
            "description": "The date when the review/photo/... was published in the online directory",
            "format": "date-time"
          },
          "author": {
            "type": "string",
            "description": "Username of the datapoint's author"
          },
          "authorImage": {
            "type": "string",
            "description": "Author profile picture url"
          },
          "countComments": {
            "type": "integer",
            "description": "Number of comments to this item.",
            "format": "int32"
          },
          "dateCreated": {
            "type": "string",
            "description": "The date the datapoint was found",
            "format": "date-time"
          },
          "directLink": {
            "type": "string",
            "description": "A link to the online profile"
          },
          "directoryType": {
            "description": "Online directory reference name",
            "$ref": "#/components/schemas/DirectoryType"
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the datapoint has been flagged. The exact nature of the flagging depends on the directory, but can be e.g. \"Report as SPAM\""
          },
          "lastUpdated": {
            "type": "string",
            "description": "Date of last update.",
            "format": "date-time"
          },
          "rating": {
            "type": "number",
            "description": "Rating given by the user. Float value, max: 5.",
            "format": "float"
          },
          "repliedByOwner": {
            "type": "boolean",
            "description": "True if the owner of the business has replied"
          },
          "secondaryData": {
            "type": "string",
            "description": "Additional info about the datapoint (eg. text content on instagram pictures)"
          },
          "threadActionDate": {
            "type": "string",
            "description": "The date of the last interaction in that thread. When a review receives a new comment, the parent will update.",
            "format": "date-time"
          }
        },
        "description": "Data Point Model"
      },
      "InboxItems": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/InboxItem"
        }
      },
      "InboxItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          },
          "rootId": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "type": "string"
          },
          "authorImage": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REVIEW",
              "PHOTO",
              "CHECKIN",
              "CONVERSATION",
              "COMMENT",
              "QUESTION",
              "POST",
              "IMAGE",
              "VIDEO",
              "LINK"
            ]
          },
          "message": {
            "type": "string"
          },
          "likes": {
            "type": "integer"
          },
          "directory": {
            "$ref": "#/components/schemas/DirectoryType"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "status": {
            "type": "string"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InboxItem"
            }
          }
        }
      },
      "WhitelabelData": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": [
              "light",
              "dark"
            ]
          },
          "primaryColor": {
            "type": "string"
          },
          "secondaryColor": {
            "type": "string"
          },
          "tertiaryColor": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          }
        }
      },
      "DirectoryType": {
        "type": "string",
        "enum": [
          "GOOGLE",
          "FACEBOOK",
          "INSTAGRAM"
        ]
      },
      "Metrics": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Metric"
        }
      },
      "Metric": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MetricType"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricData"
            }
          }
        }
      },
      "MetricType": {
        "type": "string",
        "enum": [
          "TOTAL_INTERACTIONS",
          "TOTAL_IMPRESSIONS",
          "GOOGLE_INTERACTIONS",
          "GOOGLE_IMPRESSIONS",
          "FACEBOOK_INTERACTIONS",
          "FACEBOOK_IMPRESSIONS"
        ]
      },
      "MetricData": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SocialPosts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SocialPost"
        }
      },
      "SocialPost": {
        "type": "object",
        "properties": {
          "required": [
            "id",
            "title",
            "text",
            "listingTypes",
            "publicationDate"
          ],
          "id": {
            "type": "string"
          },
          "locationIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "clickthroughUrl": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Photo"
            }
          },
          "publicationDate": {
            "type": "string",
            "format": "date-time"
          },
          "listingTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectoryType"
            }
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "securitySchemes": {
      "authToken": {
        "type": "apiKey",
        "description": "Auth Token key",
        "name": "authToken",
        "in": "header"
      }
    }
  }
}
